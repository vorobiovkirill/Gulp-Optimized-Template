// SASS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home
//   width: $icon-home-width
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites
$master-card-name: 'master-card'
$master-card-x: 0px
$master-card-y: 118px
$master-card-offset-x: 0px
$master-card-offset-y: -118px
$master-card-width: 83px
$master-card-height: 64px
$master-card-total-width: 122px
$master-card-total-height: 252px
$master-card-image: 'sprite.png'
$master-card: (0px, 118px, 0px, -118px, 83px, 64px, 122px, 252px, 'sprite.png', 'master-card', )
$qiwi-name: 'qiwi'
$qiwi-x: 0px
$qiwi-y: 0px
$qiwi-offset-x: 0px
$qiwi-offset-y: 0px
$qiwi-width: 122px
$qiwi-height: 48px
$qiwi-total-width: 122px
$qiwi-total-height: 252px
$qiwi-image: 'sprite.png'
$qiwi: (0px, 0px, 0px, 0px, 122px, 48px, 122px, 252px, 'sprite.png', 'qiwi', )
$wallet-one-name: 'wallet-one'
$wallet-one-x: 0px
$wallet-one-y: 53px
$wallet-one-offset-x: 0px
$wallet-one-offset-y: -53px
$wallet-one-width: 71px
$wallet-one-height: 60px
$wallet-one-total-width: 122px
$wallet-one-total-height: 252px
$wallet-one-image: 'sprite.png'
$wallet-one: (0px, 53px, 0px, -53px, 71px, 60px, 122px, 252px, 'sprite.png', 'wallet-one', )
$webmoney-name: 'webmoney'
$webmoney-x: 0px
$webmoney-y: 187px
$webmoney-offset-x: 0px
$webmoney-offset-y: -187px
$webmoney-width: 106px
$webmoney-height: 65px
$webmoney-total-width: 122px
$webmoney-total-height: 252px
$webmoney-image: 'sprite.png'
$webmoney: (0px, 187px, 0px, -187px, 106px, 65px, 122px, 252px, 'sprite.png', 'webmoney', )
$spritesheet-width: 122px
$spritesheet-height: 252px
$spritesheet-image: 'sprite.png'
$spritesheet-sprites: ($master-card, $qiwi, $wallet-one, $webmoney, )
$spritesheet: (122px, 252px, 'sprite.png', $spritesheet-sprites, )

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home
//   @include sprite-width($icon-home)
//
// .icon-email
//   @include sprite($icon-email)
//
// Example usage in HTML:
//   `display: block` sprite:
//   <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//   // CSS
//   .icon {
//     display: inline-block;
//   }
//
//   // HTML
//   <i class="icon icon-home"></i>
@mixin sprite-width($sprite)
  width: nth($sprite, 5)

@mixin sprite-height($sprite)
  height: nth($sprite, 6)

@mixin sprite-position($sprite)
  $sprite-offset-x: nth($sprite, 3)
  $sprite-offset-y: nth($sprite, 4)
  background-position: $sprite-offset-x  $sprite-offset-y

@mixin sprite-image($sprite)
  $sprite-image: nth($sprite, 9)
  background-image: url(#{$sprite-image})

@mixin sprite($sprite)
  @include sprite-image($sprite)
  @include sprite-position($sprite)
  @include sprite-width($sprite)
  @include sprite-height($sprite)

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SASS
//
// @include sprites($spritesheet-sprites)
@mixin sprites($sprites)
  @each $sprite in $sprites
    $sprite-name: nth($sprite, 10)
    .#{$sprite-name}
      @include sprite($sprite)
